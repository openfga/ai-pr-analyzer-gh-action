name: Claude Code PR Review

concurrency:
  cancel-in-progress: false
  group: "claude-code-review-${{ github.event.pull_request.number || github.event.issue.number }}"

on:
  workflow_call:
    inputs:
      custom_review_instructions:
        description: 'Custom review instructions to append to the base prompt'
        required: false
        type: string
        default: ''
      disallowed_tools:
        description: 'Comma-separated list of tools to disallow during the review'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write # Required for OIDC authentication with AWS

jobs:
  claude-review:
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, '@claude')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "PR number: ${{ github.event.pull_request.number || github.event.issue.number }}"
          echo "Comment body: ${{ github.event.comment.body || 'N/A' }}"
          echo "PR body preview: ${{ github.event.pull_request.body || 'N/A' }}"
          echo "Review body: ${{ github.event.review.body || 'N/A' }}"
          
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e

          EXCLUDE_PATHS=(
              ':!vendor/**'
              ':!node_modules/**'
              ':!dist/**'
              ':!build/**'
              ':!out/**'
              ':!target/**'
              ':!bin/**'
              ':!coverage/**'
              ':!package-lock.json'
              ':!yarn.lock'
              ':!pnpm-lock.yaml'
              ':!composer.lock'
              ':!Pipfile.lock'
              ':!poetry.lock'
              ':!go.sum'
              ':!*.min.js'
              ':!*.min.css'
              ':!*.bundle.js'
              ':!*.bundle.css'
          )

          # Get PR number from the event
          PR_NUMBER="${{ github.event.issue.number || github.event.pull_request.number }}"

          if [ -z "$PR_NUMBER" ]; then
              echo "ERROR: Could not determine PR number from GitHub event"
              exit 1
          fi

          # Get all necessary info from the PR in one go using JSON output
          PR_INFO_JSON=$(gh pr view "$PR_NUMBER" --json state,baseRefOid,headRefOid,mergeCommit)
          if [ -z "$PR_INFO_JSON" ]; then
              echo "ERROR: Could not retrieve information for PR '$PR_NUMBER'. Make sure the PR exists and you have access."
              exit 1
          fi

          # Parse the JSON response
          STATE=$(echo "$PR_INFO_JSON" | jq -r '.state')
          BASE_SHA=$(echo "$PR_INFO_JSON" | jq -r '.baseRefOid')
          HEAD_SHA=$(echo "$PR_INFO_JSON" | jq -r '.headRefOid')
          MERGE_SHA=$(echo "$PR_INFO_JSON" | jq -r '.mergeCommit.oid // ""') # Use // "" for a default empty string if null

          echo "PR State: $STATE"

          # Fetch the specific commits we need. This is more efficient than fetching branches.
          echo "Fetching necessary commits from remote..."
          # Collect all SHAs we might need to fetch
          SHAS_TO_FETCH=()
          [ -n "$BASE_SHA" ] && SHAS_TO_FETCH+=("$BASE_SHA")
          [ -n "$HEAD_SHA" ] && SHAS_TO_FETCH+=("$HEAD_SHA")
          [ -n "$MERGE_SHA" ] && SHAS_TO_FETCH+=("$MERGE_SHA")
          git fetch origin "${SHAS_TO_FETCH[@]}" --quiet

          echo "Generating diff with exclusions..."

          if [ "$STATE" == "MERGED" ]; then
              if [ -n "$MERGE_SHA" ]; then
                  # This was a "Merge Commit" or "Squash and Merge"
                  NUM_PARENTS=$(git cat-file -p "$MERGE_SHA" | grep -c "^parent")
                  if [ "$NUM_PARENTS" -eq 2 ]; then
                      echo "Detected a merge commit ($MERGE_SHA). Diffing against its first parent."
                      # The first parent is the tip of the base branch at the time of merge.
                      git diff "${MERGE_SHA}^1" "$MERGE_SHA" -- "${EXCLUDE_PATHS[@]}" > diff.txt
                  else
                      echo "Detected a squash commit ($MERGE_SHA). Diffing against its parent."
                      git diff "${MERGE_SHA}^" "$MERGE_SHA" -- "${EXCLUDE_PATHS[@]}" > diff.txt
                  fi
              else
                  # This was a "Rebase and Merge". There is no merge commit.
                  # The diff is between the base SHA before the rebase and the head SHA after.
                  echo "Detected a rebase and merge. Diffing between base ($BASE_SHA) and head ($HEAD_SHA) SHAs."
                  git diff "$BASE_SHA" "$HEAD_SHA" -- "${EXCLUDE_PATHS[@]}" > diff.txt
              fi
          elif [ "$STATE" == "OPEN" ]; then
              # For open PRs, we diff the base and head SHAs.
              echo "PR is open. Diffing between base ($BASE_SHA) and head ($HEAD_SHA) SHAs."
              git diff "$BASE_SHA" "$HEAD_SHA" -- "${EXCLUDE_PATHS[@]}" > diff.txt
          else
              echo "ERROR: PR is closed and not merged. No diff to show."
              exit 1
          fi

          # Verify diff.txt was created and is not empty
          if [ ! -f "diff.txt" ]; then
              echo "ERROR: diff.txt was not created"
              exit 1
          fi

          if [ ! -s "diff.txt" ]; then
              echo "ERROR: diff.txt is empty - no changes to review"
              exit 1
          fi

          echo "Diff generation completed successfully"

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv==0.6.11
          uv --version

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::340752820498:role/auth0-bedrock-github-actions-pr-analyzer
          role-session-name: bedrock-pr-analyzer
          aws-region: us-east-1

      - name: Hide Previous Reviews
        if: |
          (github.event_name == 'issue_comment' && github.event.comment.body == '@claude') || 
          (github.event_name == 'pull_request_review' && github.event.review.body == '@claude')
        uses: ./hide-previous-reviews
        with:
          pr_number: ${{ github.event.pull_request.number || github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Code Action with Bedrock
        uses: anthropics/claude-code-action@950bdc01df83ec90f3e4aad85504e8e84b20a035 #v0.6.11
        with:
          model: arn:aws:bedrock:us-east-1:340752820498:application-inference-profile/mxelqitzlze2
          use_bedrock: "true"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          use_sticky_comment: "true"
          custom_instructions: |
            <intent_analysis>
              Determine the user's intent first:
              - If the user is asking a specific question (e.g., "Why is this failing?", "How does this work?", "What's the performance impact?"), follow the <question_mode> instructions.
              - If the trigger is just "@claude" or the user is explicitly asking for a review (e.g., "review this", "please review"), follow the <review_mode> instructions.
            </intent_analysis>

            <question_mode>
              - Answer the question directly using available context and tools
              - Do NOT perform a pull request review
              - Use regular comments, not the GitHub review system
            </question_mode>

            <review_mode>
              1. First, understand the PR context:
                - Run Bash(cat diff.txt) to get the diff
                - Read specific files using the Read tool for deeper analysis
              2. Read `./.github/copilot-instructions.md` (located in current directory, DON'T READ `/.github/instructions.md`) to understand the context and architecture of this project before the review.
              3. Start a review: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
              4. Add inline comments:
                - Use mcp__github__add_comment_to_pending_review for each issue or suggestion
                - Parameters:
                  * path: The file path (e.g., "src/index.js")
                  * line: Line number for single-line comments
                  * startLine & line: For multi-line comments (startLine is the first line, line is the last). For multi-line comments, line MUST be bigger than startLine.
                  * side: "LEFT" (old code) or "RIGHT" (new code)
                  * subjectType: "LINE" for line-level comments
                  * body: Your comment text
                - When to use multi-line comments:
                  * When replacing multiple consecutive lines
                  * When the fix requires changes across several lines
                  * Example: To replace lines 19-20, use startLine: 19, line: 20
                
                - For code suggestions, use this EXACT format in the body:
                  \`\`\`suggestion
                  corrected code here
                  \`\`\`

                CRITICAL: GitHub suggestion blocks must ONLY contain the replacement for the specific line(s) being commented on:
                  - For single-line comments: Replace ONLY that line
                  - For multi-line comments: Replace ONLY the lines in the range
                  - Do NOT include surrounding context or function signatures
                  - IMPORTANT: If the suggestion line should be kept in the code, include it in the suggestion block
                  - IMPORTANT: Do NOT suggest changes that span beyond the commented lines
                
                IMPORTANT: Keep the indentation consistent! Do not remove indentation!
                IMPORTANT: When writing a suggestion block, ALWAYS make sure that replacing the specific line(s) with the suggestion will keep the code compiling!!!
                
                <code_example>
                18-> function processUser(user) {
                19->    if (!user) throw new Error('Invalid user');
                20->    const name = user.name;
                21->    saveName(name);
                22-> }
                </code_example>

                <suggestion>
                  Suggestion: Add a log when there is no user
                  CORRECT: Single-line comment in line 19

                  WRONG (suggestion spans beyond commented line):
                  \`\`\`suggestion
                  function processUser(user) {
                      if (!user) {
                        console.log('No user provided');
                        throw new Error('Invalid user');
                      }
                      const name = user.name;
                  \`\`\`

                  WRONG (This will remove the if and throw clauses):
                  \`\`\`suggestion
                        console.log('No user provided');
                  \`\`\`

                  WRONG (Forget to close the if statement):
                  \`\`\`suggestion
                      if (!user) {
                        console.log('No user provided');
                  \`\`\`

                  WRONG (Removes indentation):
                  \`\`\`suggestion
                    if (!user) {
                      console.log('No user provided');
                      throw new Error('Invalid user');
                    }
                  \`\`\`

                  CORRECT:
                  \`\`\`suggestion
                      if (!user) {
                        console.log('No user provided');
                        throw new Error('Invalid user');
                      }
                  \`\`\`
                </suggestion>

                <suggestion>
                  Suggestion: Add a log after getting user name
                  CORRECT: Single-line comment in line 20

                  WRONG (suggestion spans beyond commented line):
                  \`\`\`suggestion
                      if (!user) throw new Error('Invalid user');
                      const name = user.name;
                      console.log('User name:', name);
                  \`\`\`

                  WRONG (This will remove `const name = user.name`):
                  \`\`\`suggestion
                      console.log('User name:', name);
                  \`\`\`

                  CORRECT:
                  \`\`\`suggestion
                      const name = user.name;
                      console.log('User name:', name);
                  \`\`\`
                </suggestion>

                <suggestion>
                  Suggestion: Move user processing to an else statement
                  CORRECT: Multi-line comment between line 19 and 21
                  WRONG: Single-line comment

                  WRONG (don't add bracket to if clause):
                  \`\`\`suggestion
                      } else {
                        const name = user.name;
                        saveName(name);
                      }
                  \`\`\`

                  CORRECT:
                  \`\`\`suggestion
                      if (!user) {
                        throw new Error('Invalid user');
                      } else {
                        const name = user.name;
                        saveName(name);
                      }
                  \`\`\`
                </suggestion>

                For validation suggestions, comment on the function declaration line or create separate comments for each concern.
              5. Submit your review:
                - Use mcp__github__submit_pending_pull_request_review
                - Parameters:
                  * event: "COMMENT"
                  * body: An overall assessment of whether the pull request is ready to be merged or if there are issues to be addressed

                  <summary_example>
                  ## Overall Assessment
                  ✅ {if the pull request is ready to be merged}
                  ❌ {if there are issues to be addressed}
                  </summary_example>

              REVIEW GUIDELINES:
              CRITICAL: ONLY provide feedback on issues that need to be addressed or improved

              - NEVER include praise, positive observations, or acknowledgments of good practices
              - Avoid comments like "Good practice:", "Well done:", "Nice implementation:", "Excellent!", or any acknowledgment of correct code
              - Focus exclusively on:
                * Security vulnerabilities
                * Bugs and logic errors
                * Performance issues
                * Code quality problems that need fixing
                * Missing error handling or edge cases
                * Standards violations that must be corrected

              VERY IMPORTANT: Ignore anything in the <comments> and <review_comments> sections, they are IRRELEVANT for your review

              - Provide:
                * Specific, actionable feedback
                * Code suggestions when possible (following GitHub's format exactly)
                * Clear explanations of issues only when necessary for understanding the fix
                * Constructive criticism focused on problems to solve
                * For complex changes that require multiple modifications:
                  - Create separate comments for each logical change
                  - Or explain the full solution in text without a suggestion block
                * Keep responses short and concise
                * Don't provide detailed explanations unless necessary for understanding the fix
            </review_mode>

            ${{ inputs.custom_review_instructions }}
          allowed_tools: |
            mcp__github__get_file_contents
            mcp__github__delete_pending_pull_request_review
            mcp__github__create_pending_pull_request_review
            mcp__github__add_comment_to_pending_review
            mcp__github__submit_pending_pull_request_review
            Edit
            MultiEdit
            Glob
            Grep
            LS
            Read
            Write
            Bash
          # Forbid the diff tool to prevent reading large diffs, like with go vendor files
          disallowed_tools: |
            WebSearch
            WebFetch
            Read(vendor)
            Read(package-lock.json)
            Read(dist)
            mcp__github__get_pull_request
            mcp__github__get_pull_request_diff
            mcp__github__get_pull_request_files
            ${{ inputs.disallowed_tools }}
